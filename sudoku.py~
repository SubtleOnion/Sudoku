from compiler.ast import flatten
import sys
import random
import time


class Sudoku(object):

    blank = 0

    def __init__(self, puzzle=None):
        if puzzle:
            self.grid = self.importGrid(puzzle)
        else:
            self.grid = self.makeGrid()

    def makeGame(self):
        """creates a randomly generated game"""
        random.seed(time.time())
        self.grid = self.makeGrid()

        for x in range(8):
            for y in range(8):
                # Loop until the selection is valid
                while True:
                    # Randomly decide to place numbers
                    if random.randint(1, 2) == 2:
                        self.grid[x][y] = random.randint(1, 9)
                    if self.valid():
                        break

    def makeGrid(self):
        """creates a blank sudoku grid"""
        return [[0 for i in range(8)] for i in range(8)]

    def importGrid(self, puzzle=None):
        """imports a game from a txt file"""
        grid = []
        p = open(puzzle)
        for line in p.read().splitlines():
            grid.append([int(i) for i in line.split()])
        return grid

    def valid(self):
        """Runs conflict checkers. Returns False if conflict"""
        return self.checkRow() and self.checkCol() and self.checkSquare()

    def checkRow(self):
        """checks all rows for conflicts"""
        for y in range(8):
            # Create a copy of the row with all empty spaces removed
            cpy = [i for i in self.grid[y] if i != self.blank]
            if len(cpy) != len(set(cpy)):
                # Check if the row has duplicate values. Returns True if valid
                return False
            return True

    def checkCol(self):
        """checks all cols for conflicts"""
        for x in range(8):
            # Create a copy of col with all empty spaces removed
            cpy = [i[x] for i in self.grid if i[x] != self.blank]
            if len(cpy) != len(set(cpy)):
                # Check if the col has duplicate values. Returns True if valid
                return False
            return True

    def checkSquare(self):
        """checks all 3x3 blocks for conflicts"""
        for y in range(3):
            for x in range(3):
                cpy = [i for i in flatten([bb[y*3:y*3 + 3]
                       for bb in self.grid[x*3:x*3 + 3]])
                       if i != self.blank]
                if len(cpy) != len(set(cpy)):
                    return False
        return True

    def solve(self, x=0, y=0, silent=True):
        """solves the the game"""
        if (x, y) == (9, 8):  # Check for compleated grid
            return True
        # If the row has been compleated, continue to the next one
        elif x == 9:
            x, y = 0, y + 1
        if not silent:
            print x, y
            print self.grid
        if s.grid[x][y] == 0:  # If slot is empty
            for i in range(1, 10):  # For possible entry
                self.grid[x][y] = i  # Set slot to possible entry
                if self.valid():  # Check if the grid is valid
                    # Recursivly check the next slot
                    if self.solve(x=x+1, y=y, silent=silent):
                        return True
            self.grid[x][y] = 0
        else:  # If the currnet slot was already occupied, go to next slot
            if self.solve(x=x+1, y=y, silent=silent):
                return True
            # Return False if there's no current solutions for this slot
            # or if the puzzle is unsolvable.
        return False

if __name__ == '__main__':
    try:
        s = Sudoku(sys.argv[1])
        print s.solve(silent=False)
        print s.grid
    except:
        print 'please provide a sudoku problem'
